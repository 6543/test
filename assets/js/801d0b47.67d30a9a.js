"use strict";(self.webpackChunkwoodpecker=self.webpackChunkwoodpecker||[]).push([[745],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return m}});var i=t(7294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,i,l=function(e,n){if(null==e)return{};var t,i,l={},o=Object.keys(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var p=i.createContext({}),s=function(e){var n=i.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},u=function(e){var n=s(e.components);return i.createElement(p.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},c=i.forwardRef((function(e,n){var t=e.components,l=e.mdxType,o=e.originalType,p=e.parentName,u=r(e,["components","mdxType","originalType","parentName"]),c=s(t),m=l,f=c["".concat(p,".").concat(m)]||c[m]||d[m]||o;return t?i.createElement(f,a(a({ref:n},u),{},{components:t})):i.createElement(f,a({ref:n},u))}));function m(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var o=t.length,a=new Array(o);a[0]=c;var r={};for(var p in n)hasOwnProperty.call(n,p)&&(r[p]=n[p]);r.originalType=e,r.mdxType="string"==typeof e?e:l,a[1]=r;for(var s=2;s<o;s++)a[s]=t[s];return i.createElement.apply(null,a)}return i.createElement.apply(null,t)}c.displayName="MDXCreateElement"},676:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return r},contentTitle:function(){return p},metadata:function(){return s},toc:function(){return u},default:function(){return c}});var i=t(7462),l=t(3366),o=(t(7294),t(3905)),a=["components"],r={},p="Multi pipelines",s={unversionedId:"usage/multi-pipeline",id:"usage/multi-pipeline",isDocsHomePage:!1,title:"Multi pipelines",description:"NOTE: This Feature is only available for GitHub & Gitea repositories. Follow this issue to support further development.",source:"@site/docs/20-usage/21-multi-pipeline.md",sourceDirName:"20-usage",slug:"/usage/multi-pipeline",permalink:"/docs/usage/multi-pipeline",editUrl:"https://github.com/woodpecker-ci/woodpecker/edit/master/docs/docs/20-usage/21-multi-pipeline.md",tags:[],version:"current",sidebarPosition:21,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Pipeline syntax",permalink:"/docs/usage/pipeline-syntax"},next:{title:"Matrix builds",permalink:"/docs/usage/matrix-builds"}},u=[{value:"Rational",id:"rational",children:[]},{value:"Example multi-pipeline definition",id:"example-multi-pipeline-definition",children:[]},{value:"Status lines",id:"status-lines",children:[]},{value:"Flow control",id:"flow-control",children:[]}],d={toc:u};function c(e){var n=e.components,t=(0,l.Z)(e,a);return(0,o.kt)("wrapper",(0,i.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"multi-pipelines"},"Multi pipelines"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"NOTE: This Feature is only available for GitHub & Gitea repositories. Follow ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/woodpecker-ci/woodpecker/issues/131"},"this")," issue to support further development.")),(0,o.kt)("p",null,"By default, Woodpecker looks for the pipeline definition in ",(0,o.kt)("inlineCode",{parentName:"p"},".woodpecker.yml")," in the project root."),(0,o.kt)("p",null,"The Multi-Pipeline feature allows the pipeline to be split into several files and placed in the ",(0,o.kt)("inlineCode",{parentName:"p"},".woodpecker/")," folder. Only ",(0,o.kt)("inlineCode",{parentName:"p"},".yml")," files will we used and files in any subfolders like ",(0,o.kt)("inlineCode",{parentName:"p"},".woodpecker/sub-folder/test.yml")," will be ignored. You can set some custom path like ",(0,o.kt)("inlineCode",{parentName:"p"},".my-ci/pipelines/")," instead of ",(0,o.kt)("inlineCode",{parentName:"p"},".woodpecker/")," in the ",(0,o.kt)("a",{parentName:"p",href:"/docs/usage/project-settings"},"project settings"),". "),(0,o.kt)("h2",{id:"rational"},"Rational"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"faster lint/test feedback, the pipeline doesn't have to run fully to have a lint status pushed to the the remote"),(0,o.kt)("li",{parentName:"ul"},"better organization of the pipeline along various concerns: testing, linting, feature apps"),(0,o.kt)("li",{parentName:"ul"},"utilizing more agents to speed up build")),(0,o.kt)("h2",{id:"example-multi-pipeline-definition"},"Example multi-pipeline definition"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},".woodpecker/\n\u251c\u2500\u2500 .build.yml\n\u251c\u2500\u2500 .deploy.yml\n\u251c\u2500\u2500 .lint.yml\n\u2514\u2500\u2500 .test.yml\n")),(0,o.kt)("p",null,".woodpecker/.build.yml"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"pipeline:\n  build:\n    image: debian:stable-slim\n    commands:\n      - echo building\n      - sleep 5\n")),(0,o.kt)("p",null,".woodpecker/.deploy.yml"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"pipeline:\n  deploy:\n    image: debian:stable-slim\n    commands:\n      - echo deploying\n\ndepends_on:\n  - lint\n  - build\n  - test\n")),(0,o.kt)("p",null,".woodpecker/.test.yml"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"pipeline:\n  test:\n    image: debian:stable-slim\n    commands:\n      - echo testing\n      - sleep 5\n\ndepends_on:\n  - build\n")),(0,o.kt)("p",null,".woodpecker/.lint.yml"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"pipeline:\n  lint:\n    image: debian:stable-slim\n    commands:\n      - echo linting\n      - sleep 5\n")),(0,o.kt)("h2",{id:"status-lines"},"Status lines"),(0,o.kt)("p",null,"Each pipeline has its own status line on GitHub."),(0,o.kt)("h2",{id:"flow-control"},"Flow control"),(0,o.kt)("p",null,"The pipelines run in parallel on separate agents and share nothing."),(0,o.kt)("p",null,"Dependencies between pipelines can be set with the ",(0,o.kt)("inlineCode",{parentName:"p"},"depends_on")," element. A pipeline doesn't execute until its dependencies did not complete successfully."),(0,o.kt)("p",null,"The name for a ",(0,o.kt)("inlineCode",{parentName:"p"},"depends_on")," entry is the filename without the path, leading dots and without the file extension ",(0,o.kt)("inlineCode",{parentName:"p"},".yml"),". If the project config for example uses ",(0,o.kt)("inlineCode",{parentName:"p"},".woodpecker/")," as path for ci files with a file named ",(0,o.kt)("inlineCode",{parentName:"p"},".woodpecker/.lint.yml")," the corresponding ",(0,o.kt)("inlineCode",{parentName:"p"},"depends_on")," entry would be ",(0,o.kt)("inlineCode",{parentName:"p"},"lint"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-diff"},"pipeline:\n  deploy:\n    image: debian:stable-slim\n    commands:\n      - echo deploying\n\n+depends_on:\n+  - lint\n+  - build\n+  - test\n")),(0,o.kt)("p",null,"Pipelines that need to run even on failures should set the ",(0,o.kt)("inlineCode",{parentName:"p"},"run_on")," tag."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-diff"},"pipeline:\n  notify:\n    image: debian:stable-slim\n    commands:\n      - echo notifying\n\ndepends_on:\n  - deploy\n\n+run_on: [ success, failure ]\n")),(0,o.kt)("p",null,"Some pipelines don't need the source code, set the ",(0,o.kt)("inlineCode",{parentName:"p"},"skip_clone")," tag to skip cloning:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-diff"},"\npipeline:\n  notify:\n    image: debian:stable-slim\n    commands:\n      - echo notifying\n\ndepends_on:\n  - deploy\n\nrun_on: [ success, failure ]\n+skip_clone: true\n")))}c.isMDXComponent=!0}}]);